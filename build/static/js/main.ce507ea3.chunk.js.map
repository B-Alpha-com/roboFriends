{"version":3,"sources":["Component/Card.js","Component/CardList.js","Component/Array.js","Component/SearchBox.js","Component/Scroll.js","Container/App.js","serviceWorker.js","index.js"],"names":["Cards","robots","console","log","className","alt","src","name","email","phone","CardList","robot","map","user","i","Card","id","Persona","SearchBox","searchfield","searchRobots","type","placeholder","onChange","Scroll","props","children","App","onSearchChange","event","setState","target","value","state","fetchName","persona","concatArray","fetch","then","response","json","users","concat","this","searchCase","toLowerCase","filter","Newname","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+MAgBeA,EAdD,SAACC,GAEb,OADAC,QAAQC,IAAI,QAASF,GAEnB,yBAAKG,UAAU,wDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAAOM,KAAjC,cACrB,6BACE,gCAAMN,EAAOM,MACb,+BAAKN,EAAOO,OACZ,+BAAKP,EAAOQ,UCULC,EAjBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClB,OACE,6BACGA,EAAMC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAACC,EAAD,CACEC,GAAIL,EAAMG,GAAGE,GACbT,KAAMI,EAAMG,GAAGP,KACfC,MAAOG,EAAMG,GAAGN,MAChBC,MAAOE,EAAMG,GAAGL,aCZfQ,EAAU,CACrB,CACED,GAAI,EACJT,KAAM,UACNC,MAAO,yBACPC,MAAO,eAET,CACEO,GAAI,EACJT,KAAM,QACNC,MAAO,uBACPC,MAAO,eAGT,CACEO,GAAI,EACJT,KAAM,aACNC,MAAO,yBACPC,MAAO,gBAGT,CACEO,GAAI,EACJT,KAAM,WACNC,MAAO,0BACPC,MAAO,gBAGT,CACEO,GAAI,EACJT,KAAM,WACNC,MAAO,yBACPC,MAAO,gBAET,CACEO,GAAI,EACJT,KAAM,cACNC,MAAO,YACPC,MAAO,eAET,CACEO,GAAI,EACJT,KAAM,aACNC,MAAO,uBACPC,MAAO,iBCnBIS,EAtBG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKhB,UAAU,cACb,6BACE,wBAAIA,UAAU,aACZ,4BACE,wBAAIA,UAAU,QAAd,gBAEF,4BACE,2BACEA,UAAU,SACViB,KAAK,OACLC,YAAY,SACZC,SAAUH,SCVTI,EAJA,SAACC,GACd,OAAO,yBAAKrB,UAAU,UAAUqB,EAAMC,WCiDzBC,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAQFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEX,YAAaU,EAAME,OAAOC,SAR1C,EAAKC,MAAQ,CACXC,UAAW,GACXC,QAASlB,EACTE,YAAa,GACbiB,YAAa,IANH,E,gEAaO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKX,SAAS,CAAEI,UAAWO,IAC3B,EAAKX,SAAS,CACZM,YAAaK,EAAMC,OAAO,EAAKT,MAAME,cAI3CjC,QAAQC,IAAI,WAAYwC,KAAKV,MAAMG,e,+BAInC,IAAMQ,EAAaD,KAAKV,MAAMd,YAAY0B,cACpCzB,EAAeuB,KAAKV,MAAMG,YAAYU,QAAO,SAACC,GAClD,OAAOA,EAAQxC,KAAKsC,cAAcG,SAASJ,MAI7C,OAFA1C,QAAQC,IAAI,OAAQiB,GAGlB,yBAAKhB,UAAU,eACb,kBAAC,EAAD,CAAWgB,aAAcuB,KAAKf,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUjB,MAAOS,U,GAtCT6B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAMC,a","file":"static/js/main.ce507ea3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Cards = (robots) => {\n  console.log(\"robot\", robots);\n  return (\n    <div className=\"bg-light-green dib ma2 br3 tc pa3 grow bw2 shadow -5\">\n      <img alt=\"Robots\" src={`https://robohash.org/${robots.name}?200*200`} />\n      <div>\n        <h1> {robots.name}</h1>\n        <p> {robots.email}</p>\n        <p> {robots.phone}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Cards;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robot }) => {\n  return (\n    <div>\n      {robot.map((user, i) => {\n        return (\n          <Card\n            id={robot[i].id}\n            name={robot[i].name}\n            email={robot[i].email}\n            phone={robot[i].phone}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","export const Persona = [\n  {\n    id: 1,\n    name: \"Mubarak\",\n    email: \"salamalmumin@yahoo.com\",\n    phone: \"07080503766\",\n  },\n  {\n    id: 2,\n    name: \"Fabbs\",\n    email: \"FabbsMoney@yahoo.com\",\n    phone: \"07066411329\",\n  },\n\n  {\n    id: 3,\n    name: \"Ummu Hanni\",\n    email: \"salafiyyah73@gmail.com\",\n    phone: \"070806856748\",\n  },\n\n  {\n    id: 4,\n    name: \"Rodiyyah\",\n    email: \"Alimidaughter@yahoo.com\",\n    phone: \"070687545349\",\n  },\n\n  {\n    id: 5,\n    name: \"Adeyinka\",\n    email: \"salafiyyah73@gmail.com\",\n    phone: \"070736356575\",\n  },\n  {\n    id: 6,\n    name: \"Abuabdsalam\",\n    email: \"olasodem2\",\n    phone: \"08076453423\",\n  },\n  {\n    id: 7,\n    name: \"AbdulMalik\",\n    email: \"Abdulmalik@yahoo.com\",\n    phone: \"070553624464\",\n  },\n];\n","import React from \"react\";\n// import './index.css';\n\nconst SearchBox = ({ searchfield, searchRobots }) => {\n  return (\n    <div className=\"search_Div\">\n      <nav>\n        <ul className=\"search_ul\">\n          <li>\n            <h1 className=\"robo\">Robofriends</h1>\n          </li>\n          <li>\n            <input\n              className=\"robots\"\n              type=\"text\"\n              placeholder=\"Search\"\n              onChange={searchRobots}\n            />\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return <div className=\"scroll\">{props.children}</div>;\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\nimport CardList from \"../Component/CardList\";\nimport { Persona } from \"../Component/Array\";\nimport SearchBox from \"../Component/SearchBox\";\nimport Scroll from \"../Component/Scroll\";\n// import './index.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      fetchName: [],\n      persona: Persona,\n      searchfield: \"\",\n      concatArray: [],\n    };\n  }\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => {\n        this.setState({ fetchName: users });\n        this.setState({\n          concatArray: users.concat(this.state.persona),\n        });\n      });\n\n    console.log(\"rodiyyah\", this.state.concatArray);\n  }\n\n  render() {\n    const searchCase = this.state.searchfield.toLowerCase();\n    const searchRobots = this.state.concatArray.filter((Newname) => {\n      return Newname.name.toLowerCase().includes(searchCase);\n    });\n    console.log(\"mehn\", searchRobots);\n\n    return (\n      <div className=\"tc bg-green\">\n        <SearchBox searchRobots={this.onSearchChange} />\n        <Scroll>\n          <CardList robot={searchRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"tachyons\";\nimport App from \"./Container/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}